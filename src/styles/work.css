figure,
figure + p {
  margin-top: var(--spacing-section-xs);
}

:is(#outcome, #states, #concepts) figure {
  margin-top: 0;
}

#outcome figure:first-of-type {
  grid-column: 1/14;
  grid-row: 1/3;
}

#outcome figure:last-of-type {
  grid-column: 13/26;
  grid-row: 2/4;
}

#problem-exploration figure {
  overflow: hidden;
  padding-block: 0;
  align-items: end;
}

#problem-exploration img {
  translate: 0 clamp(12px, 3.3svw, 36px);
}

#problem-exploration img:first-of-type {
  grid-column: 1 / 7;
  grid-row: 1;
}

#problem-exploration img:last-of-type {
  grid-column: 2/8;
  grid-row: 1;
  @media (width < 48rem) {
    translate: 0 calc(clamp(12px, 3.3svw, 36px) * 4);
  }
}

#outcome h3 {
  margin-bottom: 0.5rem;
}

figcaption {
  line-height: 1.2;
}

figure:not(.without-radius) img {
  border-radius: clamp(6px, 1vw, 12px);
}

#tutorials figure img:first-of-type {
  border-bottom-left-radius: 0px;
  border-bottom-right-radius: 0px;
}

#tutorials figure img:last-of-type {
  border-top-left-radius: 0px;
  border-top-right-radius: 0px;
}

.list {
  padding-inline-start: 2ch;
  display: flex;
  flex-direction: column;
  row-gap: 0.5em;
}

.work__section > section:not(:last-of-type) {
  margin-bottom: var(--spacing-section);
}

.work-section__step > section:not(:last-of-type),
.heading-m {
  margin-bottom: var(--spacing-section-xs);
}

.work-section__step > section:not(:last-of-type):has(figure) {
  margin-bottom: var(--spacing-section-sm);
}

@media (width >= 27rem) {
  #states > div {
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  #states > div {
    grid-auto-flow: dense;
    column-gap: calc(var(--spacing-svw) / 2);
  }

  #components {
    grid-column: 1 / -1;
  }
}

@media (width >= 48rem) {
  #intro,
  #discover-figure,
  .two-cols {
    display: grid;
    grid-template-columns: minmax(0, 1fr) minmax(0, 2.25fr);
    column-gap: var(--spacing-section-sm);
  }

  .two-cols section {
    grid-column: 1 / -1;
    display: grid;
    grid-template-columns: subgrid;
  }

  .two-cols :is(h2, h3, h4, p, ul, ol) {
    grid-column: 2;
  }

  .two-cols figure {
    grid-column: span 2;
  }

  :is(#states, #concepts) figure {
    grid-column: auto;
  }

  #concepts > div {
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    width: 63rem;
    max-width: 100%;
    margin-inline: auto;
  }

  #concepts > div {
    column-gap: calc(var(--spacing-svw) * 0.75);
  }

  #concepts figure {
    justify-content: space-between;
  }

  #problem-exploration img:first-of-type {
    grid-column: 1 / 14;
    grid-row: 1;
  }

  #problem-exploration img:last-of-type {
    grid-column: 13/26;
    grid-row: 1;
  }

  @media (width < 64rem) {
    figure#components {
      grid-column: 1 / -1;
    }
  }
}

@media (width >= 64rem) {
  #states > div {
    grid-template-columns: minmax(0, 1fr) minmax(5em, 0.27fr) minmax(0, 1fr);
  }
}
